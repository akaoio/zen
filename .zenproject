# ZEN Project Configuration
# This file enforces the codebase structure and development practices

version: 1.0

project:
  name: zen
  language: C
  standard: C11
  
structure:
  enforce: true
  
  # Required directories
  required_directories:
    - src/core
    - src/types
    - src/runtime
    - src/stdlib
    - src/include/core
    - src/include/types
    - src/include/runtime
    - src/include/stdlib
    - tests/unit
    - tests/integration
    - tests/fixtures
    - tests/framework
    - tools
    - examples
    - docs
    - scripts
    
  # Required files
  required_files:
    - README.md
    - LICENSE
    - CLAUDE.md
    - ARCHITECTURE.md
    - Makefile
    - CMakeLists.txt
    - .clang-format
    - .gitignore
    - docs/idea.md
    
  # File naming patterns
  file_patterns:
    source_files: "^[a-z_]+\\.c$"
    header_files: "^[a-z_]+\\.h$"
    test_files: "^[a-z_]+_test\\.c$"
    zen_files: "^[a-z_]+\\.(zen|zn)$"

code_style:
  formatter: clang-format
  linter: cppcheck
  
  # Naming conventions
  naming:
    functions: snake_case    # e.g., lexer_scan_token
    structs: PascalCase     # e.g., ASTNode
    constants: UPPER_SNAKE  # e.g., MAX_BUFFER_SIZE
    typedefs: PascalCase    # e.g., TokenType
    
  # Include guard pattern
  include_guard_pattern: "ZEN_{MODULE}_H"
  
development:
  # Required tools
  required_tools:
    - gcc
    - make
    - cmake
    - valgrind
    - clang-format
    - node
    - npm
    
  # Compiler flags
  compiler_flags:
    debug: "-g -Wall -Wextra -Werror -O0"
    release: "-O3 -DNDEBUG"
    
testing:
  framework: cmocka
  coverage_threshold: 80
  memory_check: valgrind
  
  # Test file requirements
  test_requirements:
    - "Every .c file in src/ must have corresponding _test.c in tests/unit/"
    - "Integration tests must cover all language features"
    - "Example programs must demonstrate each feature"
    
dependencies:
  external:
    - name: cjson
      version: ">=1.7.15"
      purpose: "JSON parsing and generation"
      install: "apt-get install libcjson-dev || brew install cjson"
      
    - name: libyaml
      version: ">=0.2.5"
      purpose: "YAML parsing and generation"
      install: "apt-get install libyaml-dev || brew install libyaml"
      
    - name: pcre2
      version: ">=10.42"
      purpose: "Regular expression support"
      install: "apt-get install libpcre2-dev || brew install pcre2"
      
    - name: libcurl
      version: ">=7.88.0"
      purpose: "HTTP client functionality"
      install: "apt-get install libcurl4-openssl-dev || brew install curl"
      
    - name: sqlite3
      version: ">=3.40.0"
      purpose: "Optional persistent storage"
      required: false
      install: "apt-get install libsqlite3-dev || brew install sqlite3"
      
  development:
    - name: cmocka
      version: ">=1.1.5"
      purpose: "Unit testing framework"
      
    - name: valgrind
      version: ">=3.19.0"
      purpose: "Memory debugging"
      
ci:
  # Pre-commit checks
  pre_commit:
    - "make format-check"
    - "make lint"
    - "make test"
    
  # CI pipeline stages
  pipeline:
    - stage: format
      commands:
        - "make format-check"
        
    - stage: build
      commands:
        - "make clean"
        - "make all"
        
    - stage: test
      commands:
        - "make test"
        - "make coverage"
        
    - stage: memory
      commands:
        - "make valgrind"
        
documentation:
  # Documentation requirements
  requirements:
    - "All public functions must have documentation comments"
    - "Complex algorithms must have explanatory comments"
    - "Examples must be provided for all features"
    
  # Documentation structure
  structure:
    - docs/api/       # API reference
    - docs/guides/    # User guides
    - docs/internals/ # Implementation details