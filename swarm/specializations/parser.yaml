name: parser
description: "syntax analysis and AST construction"
keywords: "AST, parsing, grammar, syntax"
details: |
  - Recursive descent parsing
  - Expression parsing with precedence
  - AST node construction and management
  - Error recovery strategies
  - Grammar rule implementation
focus_areas: |
  - Clean AST representation
  - Efficient expression parsing (Pratt parser)
  - Comprehensive error messages
  - Memory-efficient node allocation
key_patterns: |
  ```c
  // Recursive descent pattern
  ASTNode* parse_statement(Parser* p) {
      if (match(p, TOKEN_IF)) return parse_if(p);
      if (match(p, TOKEN_WHILE)) return parse_while(p);
      return parse_expression_statement(p);
  }
  
  // Expression parsing with precedence
  ASTNode* parse_binary(Parser* p, ASTNode* left, int min_prec) {
      while (get_precedence(peek(p)) >= min_prec) {
          Token op = advance(p);
          ASTNode* right = parse_unary(p);
          left = ast_new_binary(op.type, left, right);
      }
      return left;
  }
  ```