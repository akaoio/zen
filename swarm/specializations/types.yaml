name: types
description: "value system and type operations"
keywords: "values, types, coercion, conversion"
details: |
  - Value type implementation (string, number, boolean, null)
  - Type coercion and conversion rules
  - Reference counting for memory management
  - String interning for efficiency
  - Array and object implementations
focus_areas: |
  - Memory-efficient value representation
  - Fast type checking and coercion
  - Proper reference counting
  - String pooling strategies
key_patterns: |
  ```c
  // Tagged union for values
  typedef struct Value {
      ValueType type;
      union {
          double number;
          String* string;
          bool boolean;
          Array* array;
          Object* object;
      } as;
      size_t refcount;
  } Value;
  
  // Reference counting
  void value_ref(Value* val) {
      if (val) val->refcount++;
  }
  
  void value_unref(Value* val) {
      if (val && --val->refcount == 0) {
          value_free(val);
      }
  }
  ```