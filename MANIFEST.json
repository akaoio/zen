{
  "version": "1.0.0",
  "description": "ZEN Language Implementation Manifest - Clean version with existing functions only",
  "enforcement": {
    "strict": false,
    "allow_new_files": true,
    "allow_new_functions": true,
    "allow_signature_changes": true
  },
  "files": {
    "src/core/ast.c": {
      "description": "Implementation for ast.c",
      "functions": [
        {
          "name": "ast_free",
          "signature": "void ast_free(AST_T *ast)",
          "description": "Auto-generated: ast_free function"
        }
      ]
    },
    "src/core/lexer.c": {
      "description": "Implementation for lexer.c",
      "functions": [
        {
          "name": "lexer_free",
          "signature": "void lexer_free(lexer_T *lexer)",
          "description": "Auto-generated: lexer_free function"
        },
        {
          "name": "lexer_advance",
          "signature": "void lexer_advance(lexer_T *lexer)",
          "description": "Auto-generated: lexer_advance function"
        },
        {
          "name": "lexer_skip_whitespace",
          "signature": "void lexer_skip_whitespace(lexer_T *lexer)",
          "description": "Auto-generated: lexer_skip_whitespace function"
        },
        {
          "name": "lexer_keyword_type",
          "signature": "int lexer_keyword_type(const char *value)",
          "description": "Auto-generated: lexer_keyword_type function"
        },
        {
          "name": "lexer_is_type_name",
          "signature": "static bool lexer_is_type_name(const char *value)",
          "description": "Auto-generated: lexer_is_type_name function"
        },
        {
          "name": "lexer_get_location",
          "signature": "SourceLocation lexer_get_location(const lexer_T *lexer)",
          "description": "Auto-generated: lexer_get_location function"
        },
        {
          "name": "lexer_enter_error_recovery",
          "signature": "void lexer_enter_error_recovery(lexer_T *lexer, const char *error_message)",
          "description": "Auto-generated: lexer_enter_error_recovery function"
        },
        {
          "name": "lexer_exit_error_recovery",
          "signature": "void lexer_exit_error_recovery(lexer_T *lexer)",
          "description": "Auto-generated: lexer_exit_error_recovery function"
        }
      ]
    },
    "src/core/parser.c": {
      "description": "Implementation for parser.c",
      "functions": [
        {
          "name": "parser_free",
          "signature": "void parser_free(parser_T *parser)",
          "description": "Auto-generated: parser_free function"
        },
        {
          "name": "parser_eat",
          "signature": "void parser_eat(parser_T *parser, int token_type)",
          "description": "Auto-generated: parser_eat function"
        },
        {
          "name": "parser_get_precedence",
          "signature": "int parser_get_precedence(int token_type)",
          "description": "Auto-generated: parser_get_precedence function"
        },
        {
          "name": "parser_is_binary_operator",
          "signature": "int parser_is_binary_operator(int token_type)",
          "description": "Auto-generated: parser_is_binary_operator function"
        },
        {
          "name": "parser_peek_for_object_literal",
          "signature": "int parser_peek_for_object_literal(parser_T *parser)",
          "description": "Auto-generated: parser_peek_for_object_literal function"
        },
        {
          "name": "parser_peek_for_object_literal_strict",
          "signature": "int parser_peek_for_object_literal_strict(parser_T *parser)",
          "description": "Auto-generated: parser_peek_for_object_literal_strict function"
        },
        {
          "name": "parser_has_errors",
          "signature": "bool parser_has_errors(parser_T *parser)",
          "description": "Auto-generated: parser_has_errors function"
        },
        {
          "name": "parser_in_panic_mode",
          "signature": "bool parser_in_panic_mode(parser_T *parser)",
          "description": "Auto-generated: parser_in_panic_mode function"
        },
        {
          "name": "parser_get_error_count",
          "signature": "size_t parser_get_error_count(parser_T *parser)",
          "description": "Auto-generated: parser_get_error_count function"
        }
      ]
    },
    "src/core/visitor.c": {
      "description": "Implementation for visitor.c",
      "functions": [
        {
          "name": "is_truthy",
          "signature": "static bool is_truthy(AST_T *ast)",
          "description": "Auto-generated: is_truthy function"
        },
        {
          "name": "visitor_update_ast_scope",
          "signature": "static void visitor_update_ast_scope(AST_T *node, scope_T *new_scope)",
          "description": "Auto-generated: visitor_update_ast_scope function"
        },
        {
          "name": "visitor_execute_user_function",
          "signature": "static AST_T * visitor_execute_user_function(visitor_T *visitor, AST_T *fdef, AST_T **args, int args_size)",
          "description": "Auto-generated: visitor_execute_user_function function"
        },
        {
          "name": "visitor_get_time_diff",
          "signature": "static double visitor_get_time_diff(clock_t start, clock_t end)",
          "description": "Auto-generated: visitor_get_time_diff function"
        },
        {
          "name": "visitor_push_call_frame",
          "signature": "static void visitor_push_call_frame(visitor_T *visitor, AST_T *function_def, AST_T **args, size_t arg_count, const char *function_name)",
          "description": "Auto-generated: visitor_push_call_frame function"
        },
        {
          "name": "visitor_pop_call_frame",
          "signature": "static void visitor_pop_call_frame(visitor_T *visitor)",
          "description": "Auto-generated: visitor_pop_call_frame function"
        },
        {
          "name": "visitor_update_function_profile",
          "signature": "static void visitor_update_function_profile(visitor_T *visitor, const char *function_name, double execution_time)",
          "description": "Auto-generated: visitor_update_function_profile function"
        },
        {
          "name": "visitor_is_constant_expression",
          "signature": "static bool visitor_is_constant_expression(AST_T *node)",
          "description": "Auto-generated: visitor_is_constant_expression function"
        }
      ]
    },
    "src/core/memory.c": {
      "description": "Implementation for memory.c",
      "functions": [
        {
          "name": "memory_ref_inc",
          "signature": "size_t memory_ref_inc(size_t *ref_count)",
          "description": "Auto-generated: memory_ref_inc function"
        },
        {
          "name": "memory_ref_dec",
          "signature": "size_t memory_ref_dec(size_t *ref_count)",
          "description": "Auto-generated: memory_ref_dec function"
        },
        {
          "name": "memory_ref_get",
          "signature": "size_t memory_ref_get(const size_t *ref_count)",
          "description": "Auto-generated: memory_ref_get function"
        },
        {
          "name": "memory_check_leaks",
          "signature": "size_t memory_check_leaks(void)",
          "description": "Auto-generated: memory_check_leaks function"
        },
        {
          "name": "update_stats_alloc",
          "signature": "static void update_stats_alloc(size_t size)",
          "description": "Auto-generated: update_stats_alloc function"
        },
        {
          "name": "update_stats_free",
          "signature": "static void update_stats_free(size_t size)",
          "description": "Auto-generated: update_stats_free function"
        },
        {
          "name": "add_debug_block",
          "signature": "static void add_debug_block(void *ptr, size_t size, const char *file, int line)",
          "description": "Auto-generated: add_debug_block function"
        },
        {
          "name": "remove_debug_block",
          "signature": "static void remove_debug_block(void *ptr)",
          "description": "Auto-generated: remove_debug_block function"
        }
      ]
    },
    "src/core/error.c": {
      "description": "Implementation for error.c",
      "functions": [
        {
          "name": "error_is_error",
          "signature": "bool error_is_error(const Value *value)",
          "description": "Auto-generated: error_is_error function"
        },
        {
          "name": "error_get_code",
          "signature": "int error_get_code(const Value *error)",
          "description": "Auto-generated: error_get_code function"
        },
        {
          "name": "error_print",
          "signature": "void error_print(const Value *error, const char *prefix)",
          "description": "Auto-generated: error_print function"
        },
        {
          "name": "error_print_simple",
          "signature": "void error_print_simple(const Value *error)",
          "description": "Auto-generated: error_print_simple function"
        },
        {
          "name": "error_has_code",
          "signature": "bool error_has_code(const Value *error, int code)",
          "description": "Auto-generated: error_has_code function"
        },
        {
          "name": "error_has_message",
          "signature": "bool error_has_message(const Value *error, const char *message_substring)",
          "description": "Auto-generated: error_has_message function"
        },
        {
          "name": "error_occurred",
          "signature": "bool error_occurred(Value **values, size_t count)",
          "description": "Auto-generated: error_occurred function"
        }
      ]
    },
    "src/core/scope.c": {
      "description": "Implementation for scope.c",
      "functions": [
        {
          "name": "scope_free",
          "signature": "void scope_free(scope_T *scope)",
          "description": "Auto-generated: scope_free function"
        }
      ]
    },
    "src/core/token.c": {
      "description": "Implementation for token.c",
      "functions": [
        {
          "name": "token_free",
          "signature": "void token_free(token_T *token)",
          "description": "Auto-generated: token_free function"
        }
      ]
    },
    "src/types/value.c": {
      "description": "Implementation for value.c",
      "functions": [
        {
          "name": "value_equals",
          "signature": "bool value_equals(const Value *a, const Value *b)",
          "description": "Auto-generated: value_equals function"
        },
        {
          "name": "value_free_data",
          "signature": "static void value_free_data(Value *value)",
          "description": "Auto-generated: value_free_data function"
        },
        {
          "name": "array_free",
          "signature": "static void array_free(ZenArray *array)",
          "description": "Auto-generated: array_free function"
        },
        {
          "name": "object_free",
          "signature": "static void object_free(ZenObject *object)",
          "description": "Auto-generated: object_free function"
        },
        {
          "name": "string_free",
          "signature": "static void string_free(ZenString *zen_str)",
          "description": "Auto-generated: string_free function"
        },
        {
          "name": "class_free",
          "signature": "static void class_free(ZenClass *class_def)",
          "description": "Auto-generated: class_free function"
        },
        {
          "name": "instance_free",
          "signature": "static void instance_free(ZenInstance *instance)",
          "description": "Auto-generated: instance_free function"
        },
        {
          "name": "value_is_truthy_public",
          "signature": "bool value_is_truthy_public(const Value *value)",
          "description": "Auto-generated: value_is_truthy_public function"
        },
        {
          "name": "value_to_number_or_nan",
          "signature": "double value_to_number_or_nan(const Value *value)",
          "description": "Auto-generated: value_to_number_or_nan function"
        },
        {
          "name": "value_is_comparable",
          "signature": "bool value_is_comparable(const Value *a, const Value *b)",
          "description": "Auto-generated: value_is_comparable function"
        },
        {
          "name": "value_get_length",
          "signature": "size_t value_get_length(const Value *value)",
          "description": "Auto-generated: value_get_length function"
        }
      ]
    },
    "src/types/array.c": {
      "description": "Implementation for array.c",
      "functions": [
        {
          "name": "array_push",
          "signature": "void array_push(Value *array, Value *item)",
          "description": "Auto-generated: array_push function"
        },
        {
          "name": "array_set",
          "signature": "void array_set(Value *array, size_t index, Value *item)",
          "description": "Auto-generated: array_set function"
        },
        {
          "name": "array_length",
          "signature": "size_t array_length(const Value *array)",
          "description": "Auto-generated: array_length function"
        },
        {
          "name": "array_contains",
          "signature": "bool array_contains(const Value *array, const Value *item)",
          "description": "Auto-generated: array_contains function"
        }
      ]
    },
    "src/types/object.c": {
      "description": "Implementation for object.c",
      "functions": [
        {
          "name": "object_find_key_index",
          "signature": "static int object_find_key_index(const ZenObject *object, const char *key)",
          "description": "Auto-generated: object_find_key_index function"
        },
        {
          "name": "object_expand_if_needed",
          "signature": "static bool object_expand_if_needed(ZenObject *object)",
          "description": "Auto-generated: object_expand_if_needed function"
        },
        {
          "name": "free_path_parts",
          "signature": "static void free_path_parts(char **parts, size_t count)",
          "description": "Auto-generated: free_path_parts function"
        },
        {
          "name": "object_size",
          "signature": "size_t object_size(const Value *object)",
          "description": "Auto-generated: object_size function"
        }
      ]
    }
  }
}